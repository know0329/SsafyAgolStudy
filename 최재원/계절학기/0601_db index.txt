https://github.com/MindorksOpenSource/Kotlin-Flow-Android-Examples/tree/master

https://mangkyu.tistory.com/96
https://choicode.tistory.com/27
https://choicode.tistory.com/28

인덱스란?
  => 인덱스란 추가적인 쓰기 작업과 저장 공간을 활용하여 데이터베이스 테이블의 검색 속도를 향상시키기 위한 자료구조.
    책의 모든 페이지를 살피면 오래 걸림 -> 맨 앞 또는 맨 뒤에 색인을 추가. DB index는 책의 색인과 같음.
    테이블의 모든 데이터를 검색하면 오래 걸림. 데이터와 데이터의 위치를 포함한 자료구조로 빠르게 조회되도록.

    인덱스를 활용하면, 데이터를 조회하는 SELECT 외에도 UPDATE나 DELETE의 성능이 함께 향상됨.
    이유는 해당 연산을 수행하려면 해당 대상을 조회해야만 작업을 할 수 있기 때문
       index를 사용하지 않은 컬럼을 조회 -> 전체를 탐색하는 Full Scan을 수행. 처리 속도 떨어짐.

장점 ?
  => 테이블을 조회하는 속도와 그에 따른 성능을 향상
  => 전반적인 시스템의 부하를 줄일 수 있다

단점 ?
  => 인덱스를 관리하기 위해 DB의 약 10%에 해당하는 저장공간이 필요
  => 인덱스를 관리하기 위해 추가 작업이 필요
  => 인덱스를 잘못 사용할 경우 오히려 성능이 저하되는 역효과가 발생.
      ( update나 delete시 기존의 인덱스를 삭제하지 않고 '사용하지 않음' 처리를 해줌. 
      해당 연산이 빈번하면, 데이터보다 인덱스가 많아지게 되어 비대해진 인덱스 때문에 오히려 성능이 저하됨. )

인덱스 관리 ?
  => index를 항상 최신의 정렬된 상태로 유지해야 원하는 값을 빠르게 탐색 가능.
    인덱스가 적용된 컬럼에 INSERT, UPDATE, DELETE가 수행시, 추가적인 연산 필요함. 그에 따른 오버헤드 발생.
  => INSERT: 새로운 데이터에 대한 인덱스를 추가
  => DELETE: 삭제하는 데이터의 인덱스를 사용하지 않는다는 작업을 진행
  => UPDATE: 기존의 인덱스를 사용하지 않음 처리하고, 갱신된 데이터에 대해 인덱스를 추가

인덱스는 어떨 때 사용 ?
  => 규모가 작지 않은 테이블
 => INSERT, UPDATE, DELETE가 자주 발생하지 않는 컬럼
 => JOIN이나 WHERE 또는 ORDER BY에 자주 사용되는 컬럼
  => 데이터의 중복도가 낮은 컬럼  -> 인덱스는 key-value 형태의 트리로 데이터를 저장.데이터가 중복되면 검색 대상이 증가.
  => 기타 등등





인덱스(index)를 사용하면 좋은 경우에서 데이터 중복도가 낮은 컬럼이 있는 이유가 무엇인가요?
  => 인덱스는 내부적으로 Key,Value의 트리 형태로 데이터를 저장하는데, 
    데이터(Key)가 중복되어 여러개 존재하면 검색되는 대상이 증가하기 때문