package swea_0324;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_1325_bfs {

	static int N, M, len;
	static List<Integer>[] list;
	static int[] cnt;
	static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		list = new ArrayList[N+1];
		for(int i=0; i<=N; i++) 
			list[i] = new ArrayList<Integer>();
		
		for(int m=0; m<M; m++) {
			st = new StringTokenizer(br.readLine());
			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());
			list[from].add(to);
		}
		
		cnt = new int[N+1];
		for(int i=1; i<=N; i++) {
			bfs(i);
		}
		int max_len = 0;
		for(int i=1; i<=N; i++) {
			if(cnt[i] == max_len) sb.append(i + " ");
			else if(cnt[i] > max_len) {
				sb = new StringBuilder();
				sb.append(i + " ");
				max_len = cnt[i];
			}
		}
		System.out.println(sb);
	}
	
	static void bfs(int start) {
		boolean[] visited = new boolean[N+1];
		Queue<Integer> q = new LinkedList<>();
		visited[start] = true;
		q.offer(start);
		
		while(!q.isEmpty()) {
			int x = q.poll();
			for(int num : list[x]) {
				if(!visited[num]) {
					cnt[num]++;
					visited[num] = true;
					q.offer(num);
				}
			}
		}
	}
}